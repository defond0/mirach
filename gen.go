// +build ignore

package main

import (
	"html/template"
	"os"
	"strings"
	"time"

	"github.com/spf13/viper"
)

func init() {
	viper.SetConfigName("configBuild")
	viper.AddConfigPath(".")
	if err := viper.ReadInConfig(); err != nil {
		panic(err)
	}
}

func main() {
	genPlugins()

}

func genPlugins() {
	tempIn := struct {
		Imports   []string
		Pkgs      []string
		Timestamp int64
	}{
		Imports:   viper.GetStringSlice("plugins"),
		Pkgs:      []string{},
		Timestamp: time.Now().Unix(),
	}
	for _, i := range tempIn.Imports {
		s := strings.Split(i, "/")
		tempIn.Pkgs = append(tempIn.Pkgs, s[len(s)-1])
	}
	f, err := os.Create("./lib/plugin/plugins.go")
	if err != nil {
		panic(err)
	}
	defer f.Close()
	pluginsTemplate.Execute(f, tempIn)
}

var pluginsTemplate = template.Must(template.New("").Parse(`// Code generated by go generate; DO NOT EDIT.
// This file was generated at {{ .Timestamp }}
package plugin

import (
{{- range .Imports}}
	"{{ . }}"
{{- end}}
)

var Plugins = []Plugin{
{{- range .Pkgs }}
	{{ . }}.New(),
{{- end }}
}
`))
